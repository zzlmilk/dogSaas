{
  "_from": "watchify@^3.9.0",
  "_id": "watchify@3.9.0",
  "_inBundle": false,
  "_integrity": "sha1-8HX9LoqGrN6Eztum5cKgvt1SPZ4=",
  "_location": "/watchify",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "watchify",
    "fetchSpec": "^3.9.0",
    "name": "watchify",
    "raw": "watchify@^3.9.0",
    "rawSpec": "^3.9.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/watchify/-/watchify-3.9.0.tgz",
  "_shasum": "f075fd2e8a86acde84cedba6e5c2a0bedd523d9e",
  "_spec": "watchify@^3.9.0",
  "_where": "/Users/zhouzhiling/Desktop/dogSAAS",
  "author": {
    "email": "mail@substack.net",
    "name": "James Halliday",
    "url": "http://substack.net"
  },
  "bin": {
    "watchify": "bin/cmd.js"
  },
  "bugs": {
    "url": "https://github.com/substack/watchify/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "anymatch": "^1.3.0",
    "browserify": "^14.0.0",
    "chokidar": "^1.0.0",
    "defined": "^1.0.0",
    "outpipe": "^1.1.0",
    "through2": "^2.0.0",
    "xtend": "^4.0.0"
  },
  "deprecated": false,
  "description": "watch mode for browserify builds",
  "devDependencies": {
    "brfs": "^1.0.1",
    "mkdirp": "~0.5.1",
    "split": "^1.0.0",
    "tape": "^4.2.2",
    "uglify-js": "^2.5.0",
    "win-spawn": "^2.0.0"
  },
  "homepage": "https://github.com/substack/watchify",
  "keywords": [
    "browser",
    "browserify",
    "browserify-tool",
    "build",
    "bundle",
    "watch"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "watchify",
  "optionalDependencies": {},
  "readme": "# watchify\r\n\r\nwatch mode for [browserify](https://github.com/substack/node-browserify) builds\r\n\r\n[![build status](https://secure.travis-ci.org/substack/watchify.png)](http://travis-ci.org/substack/watchify)\r\n\r\nUpdate any source file and your browserify bundle will be recompiled on the\r\nspot.\r\n\r\n# example\r\n\r\n```\r\n$ watchify main.js -o static/bundle.js\r\n```\r\n\r\nNow as you update files, `static/bundle.js` will be automatically\r\nincrementally rebuilt on the fly.\r\n\r\nThe `-o` option can be a file or a shell command (not available on Windows)\r\nthat receives piped input:\r\n\r\n``` sh\r\nwatchify main.js -o 'exorcist static/bundle.js.map > static/bundle.js' -d\r\n```\r\n\r\n``` sh\r\nwatchify main.js -o 'uglifyjs -cm > static/bundle.min.js'\r\n```\r\n\r\nYou can use `-v` to get more verbose output to show when a file was written and how long the bundling took (in seconds):\r\n\r\n```\r\n$ watchify browser.js -d -o static/bundle.js -v\r\n610598 bytes written to static/bundle.js (0.23 seconds) at 8:31:25 PM\r\n610606 bytes written to static/bundle.js (0.10 seconds) at 8:45:59 PM\r\n610597 bytes written to static/bundle.js (0.14 seconds) at 8:46:02 PM\r\n610606 bytes written to static/bundle.js (0.08 seconds) at 8:50:13 PM\r\n610597 bytes written to static/bundle.js (0.08 seconds) at 8:58:16 PM\r\n610597 bytes written to static/bundle.js (0.19 seconds) at 9:10:45 PM\r\n```\r\n\r\n# usage\r\n\r\nUse `watchify` with all the same options as `browserify` except that `-o` (or\r\n`--outfile`) is mandatory. Additionally, there are also:\r\n\r\n```\r\nStandard Options:\r\n\r\n  --outfile=FILE, -o FILE\r\n\r\n    This option is required. Write the browserify bundle to this file. If\r\n    the file contains the operators `|` or `>`, it will be treated as a\r\n    shell command, and the output will be piped to it.\r\n\r\n  --verbose, -v                     [default: false]\r\n\r\n    Show when a file was written and how long the bundling took (in\r\n    seconds).\r\n\r\n  --version\r\n\r\n    Show the watchify and browserify versions with their module paths.\r\n```\r\n\r\n```\r\nAdvanced Options:\r\n\r\n  --delay                           [default: 100]\r\n\r\n    Amount of time in milliseconds to wait before emitting an \"update\"\r\n    event after a change.\r\n\r\n  --ignore-watch=GLOB, --iw GLOB    [default: false]\r\n\r\n    Ignore monitoring files for changes that match the pattern. Omitting\r\n    the pattern will default to \"**/node_modules/**\".\r\n\r\n  --poll=INTERVAL                   [default: false]\r\n\r\n    Use polling to monitor for changes. Omitting the interval will default\r\n    to 100ms. This option is useful if you're watching an NFS volume.\r\n```\r\n\r\n# methods\r\n\r\n``` js\r\nvar watchify = require('watchify');\r\n```\r\n\r\n## watchify(b, opts)\r\n\r\nwatchify is a browserify [plugin](https://github.com/substack/node-browserify#bpluginplugin-opts), so it can be applied like any other plugin.\r\nHowever, when creating the browserify instance `b`, **you MUST set the `cache`\r\nand `packageCache` properties**:\r\n\r\n``` js\r\nvar b = browserify({ cache: {}, packageCache: {} });\r\nb.plugin(watchify);\r\n```\r\n\r\n```js\r\nvar b = browserify({\r\n  cache: {},\r\n  packageCache: {},\r\n  plugin: [watchify]\r\n});\r\n```\r\n\r\n**By default, watchify doesn't display any output, see [events](https://github.com/substack/watchify#events) for more info.**\r\n\r\n`b` continues to behave like a browserify instance except that it caches file\r\ncontents and emits an `'update'` event when a file changes. You should call\r\n`b.bundle()` after the `'update'` event fires to generate a new bundle.\r\nCalling `b.bundle()` extra times past the first time will be much faster due\r\nto caching.\r\n\r\n**Important:** Watchify will not emit `'update'` events until you've called\r\n`w.bundle()` once and completely drained the stream it returns.\r\n\r\n```js\r\nvar fs = require('fs');\r\nvar browserify = require('browserify');\r\nvar watchify = require('watchify');\r\n\r\nvar b = browserify({\r\n  entries: ['path/to/entry.js'],\r\n  cache: {},\r\n  packageCache: {},\r\n  plugin: [watchify]\r\n});\r\n\r\nb.on('update', bundle);\r\nbundle();\r\n\r\nfunction bundle() {\r\n  b.bundle().pipe(fs.createWriteStream('output.js'));\r\n}\r\n```\r\n\r\n### options\r\n\r\nYou can to pass an additional options object as a second parameter of\r\nwatchify. Its properties are:\r\n\r\n`opts.delay` is the amount of time in milliseconds to wait before emitting\r\nan \"update\" event after a change. Defaults to `100`.\r\n\r\n`opts.ignoreWatch` ignores monitoring files for changes. If set to `true`,\r\nthen `**/node_modules/**` will be ignored. For other possible values see\r\nChokidar's [documentation](https://github.com/paulmillr/chokidar#path-filtering) on \"ignored\".\r\n\r\n`opts.poll` enables polling to monitor for changes. If set to `true`, then\r\na polling interval of 100ms is used. If set to a number, then that amount of\r\nmilliseconds will be the polling interval. For more info see Chokidar's\r\n[documentation](https://github.com/paulmillr/chokidar#performance) on\r\n\"usePolling\" and \"interval\".\r\n**This option is useful if you're watching an NFS volume.**\r\n\r\n```js\r\nvar b = browserify({ cache: {}, packageCache: {} });\r\n// watchify defaults:\r\nb.plugin(bundle, {\r\n  delay: 100,\r\n  ignoreWatch: ['**/node_modules/**'],\r\n  poll: false\r\n});\r\n```\r\n\r\n## b.close()\r\n\r\nClose all the open watch handles.\r\n\r\n# events\r\n\r\n## b.on('update', function (ids) {})\r\n\r\nWhen the bundle changes, emit the array of bundle `ids` that changed.\r\n\r\n## b.on('bytes', function (bytes) {})\r\n\r\nWhen a bundle is generated, this event fires with the number of bytes.\r\n\r\n## b.on('time', function (time) {})\r\n\r\nWhen a bundle is generated, this event fires with the time it took to create the\r\nbundle in milliseconds.\r\n\r\n## b.on('log', function (msg) {})\r\n\r\nThis event fires after a bundle was created with messages of the form:\r\n\r\n```\r\nX bytes written (Y seconds)\r\n```\r\n\r\nwith the number of bytes in the bundle X and the time in seconds Y.\r\n\r\n# install\r\n\r\nWith [npm](https://npmjs.org) do:\r\n\r\n```\r\n$ npm install -g watchify\r\n```\r\n\r\nto get the watchify command and:\r\n\r\n```\r\n$ npm install watchify\r\n```\r\n\r\nto get just the library.\r\n\r\n# troubleshooting\r\n\r\n## rebuilds on OS X never trigger\r\n\r\nIt may be related to a bug in `fsevents` (see [#250](https://github.com/substack/watchify/issues/205#issuecomment-98672850)\r\nand [stackoverflow](http://stackoverflow.com/questions/26708205/webpack-watch-isnt-compiling-changed-files/28610124#28610124)).\r\nTry the `--poll` flag\r\nand/or renaming the project's directory - that might help.\r\n\r\n# see also\r\n\r\n- [budo](https://www.npmjs.com/package/budo) – a simple development server built on watchify\r\n- [errorify](https://www.npmjs.com/package/errorify) – a plugin to add error handling to watchify development\r\n- [watchify-request](https://www.npmjs.com/package/watchify-request) – wraps a `watchify` instance to avoid stale bundles in HTTP requests\r\n- [watchify-middleware](https://www.npmjs.com/package/watchify-middleware) – similar to `watchify-request`, but includes some higher-level features\r\n\r\n# license\r\n\r\nMIT\r\n",
  "readmeFilename": "readme.markdown",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/watchify.git"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "version": "3.9.0"
}
