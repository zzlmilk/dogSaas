{
  "_from": "hbsfy@^2.7.0",
  "_id": "hbsfy@2.8.1",
  "_inBundle": false,
  "_integrity": "sha512-NHn+bc1FI+TTZzFkpw+0JetPDzxRGiYBNMb3eSDO9J0rZE/SU6tm9QAc3JT9wblYOQWnGvzPENE+x+xDxlATeQ==",
  "_location": "/hbsfy",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "hbsfy",
    "fetchSpec": "^2.7.0",
    "name": "hbsfy",
    "raw": "hbsfy@^2.7.0",
    "rawSpec": "^2.7.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/hbsfy/-/hbsfy-2.8.1.tgz",
  "_shasum": "33069dcfcaf6a4818351aeb3d664f51259180aa9",
  "_spec": "hbsfy@^2.7.0",
  "_where": "/Users/zhouzhiling/Desktop/dogSAAS",
  "author": {
    "name": "Esa-Matti Suuronen"
  },
  "bugs": {
    "url": "https://github.com/epeli/node-hbsfy/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "through": "~2.3.4",
    "xtend": "~3.0.0"
  },
  "deprecated": false,
  "description": "Handlebars precompiler plugin for Browserify v2",
  "devDependencies": {
    "browserify": "~4.2.3",
    "concat-stream": "~1.4.1",
    "ember-template-compiler": "github:toranb/ember-template-compiler#b924608f",
    "handlebars": "^4"
  },
  "homepage": "https://github.com/epeli/node-hbsfy#readme",
  "keywords": [
    "browserify",
    "browserify-transform",
    "handlebars",
    "js",
    "plugin",
    "transform"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "hbsfy",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/epeli/node-hbsfy.png?branch=master)](https://travis-ci.org/epeli/node-hbsfy)\r\n\r\n# hbsfy\r\n\r\n[Handlebars][] precompiler plugin for [Browserify][] without magic.\r\n\r\nCompiles Handlebars templates to plain Javascript. The compiled templates only\r\nhave one copy of the Handlebars runtime so they are lightweight and fast!\r\n\r\n## Usage\r\n\r\nInstall hbsfy locally to your project:\r\n\r\n    npm install --save-dev hbsfy\r\n\r\nYou will also need Handlebars installed. Handlebars 1, 2, 3, and 4 are supported\r\nfor now (use 4 for best results):\r\n\r\n    npm install --save-dev handlebars\r\n\r\nThen use it as Browserify transform module with `-t`:\r\n\r\n    browserify -t hbsfy main.js > bundle.js\r\n\r\nwhere main.js can be like:\r\n\r\n```javascript\r\nvar template = require(\"./template.hbs\");\r\ndocument.body.innerHTML = template({ name: \"Epeli\" });\r\n```\r\n\r\nand template.hbs:\r\n\r\n```html\r\n<h1>Hello {{name}}!</h1>\r\n```\r\n\r\n## Options\r\n\r\n### Custom Extension\r\n\r\nYou can use `--extensions` or `-e` subarg option to configure custom extensions\r\nfor the transform:\r\n\r\n    browserify -t [ hbsfy -e html,htm ] main.js > bundle.js\r\n\r\n### Alternate Precompiler/Compiler\r\n\r\nYou can specify how the templates are precompiled by using `-p` or `--precompiler`, which\r\nmight also be used with the `-c` or `--compiler` option, like so:\r\n\r\n    browserify -t [ hbsfy -p ember-template-compiler -c Ember.Handlebars ] main.js > bundle.js\r\n\r\nBy default the precompiler is the [handlebars](https://www.npmjs.org/package/handlebars) node module\r\nand the compiler is `\"require('hbsfy/runtime')\"`.\r\n\r\nOptions for the precompiler can be passed using a `precompilerOptions` key.\r\n\r\nExample:\r\n\r\nEnable `myUltimateHelper` only\r\n\r\n    browserify -t [ hbsfy --precompilerOptions [ --knownHelpersOnly --knownHelpers [ --myUltimateHelper ] ] ]  main.js > bundle.js\r\n\r\nSee [Handlebars API reference](http://handlebarsjs.com/reference.html) for\r\ndetails.\r\n\r\n### Common JS Partial Resolution\r\n\r\nUsing the `--traverse` or `-t` option will cause partials to be resolved using node's [module resolution algorithm](https://nodejs.org/docs/latest/api/modules.html#modules_all_together). Be sure to prefix relative paths with `./` or `../` as needed. Otherwise the algorithm assumes a `node_module` is being referenced.\r\n\r\nExample:\r\n\r\n    browserify -t [ hbsfy -t ] main.js > bundle.js\r\n\r\n```html\r\n<!-- main.hbs -->\r\n<div>{{> ./path/to/partial.hbs }}</div>\r\n```\r\n\r\n```html\r\n<!-- path/to/partial.hbs -->\r\n<p>I'm a partial</p>\r\n```\r\n\r\n## Inline Partials\r\n\r\nIf you are using Common JS partial resolution (setting the `--traverse` flag) and you are using Handlebars 4.0.0 or later, you can still use inline partials. Make sure to not use inline partial names that conflict with `node_module` dependencies. The inline partial will be used over a dependency reference.\r\n\r\n\r\n## package.json\r\n\r\nTransform can be configured from the package.json too.\r\n\r\n```json\r\n{\r\n  \"browserify\": {\r\n    \"transform\": [\r\n      [\r\n        \"hbsfy\",\r\n        {\r\n          \"extensions\": [\r\n            \"html\"\r\n          ],\r\n          \"precompilerOptions\": {\r\n            \"knownHelpersOnly\": true,\r\n            \"knownHelpers\": {\r\n              \"myUltimateHelper\": true\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThe `precompiler` and `compiler` keys are naturally available too.\r\n\r\nSee [module-deps\r\ndocumentation](https://github.com/substack/module-deps#packagejson-transformkey)\r\nfor more information as this feature is implemented there (it's a part of\r\nBrowserify itself).\r\n\r\n## Programmatic usage\r\n\r\nThe `configure` method of the transform can be used to create new transforms\r\nwith different defaults.\r\n\r\n```javascript\r\nvar hbsfy = require(\"hbsfy\").configure({\r\n  extensions: [\"html\"]\r\n});\r\n\r\nvar browserify = require(\"browserify\");\r\nvar b = browserify(\"./index.js\");\r\nb.transform(hbsfy);\r\nb.bundle().pipe(fs.createWriteStream(\"./bundle.js\"));\r\n```\r\n\r\n### Helpers\r\n\r\nTo register custom helpers, require the runtime and run `registerHelper` to\r\ncreate helper:\r\n\r\n```javascript\r\nvar Handlebars = require(\"hbsfy/runtime\");\r\nHandlebars.registerHelper(\"upcase\", function(s) {\r\n  return s.toUpperCase();\r\n});\r\n```\r\n\r\n### Partials\r\n\r\nPartials can be created by giving precompiled template to the `registerPartial`\r\nfunction.\r\n\r\n```javascript\r\nHandlebars.registerPartial('link', require(\"./partial.hbs\"));\r\n```\r\n\r\nCheckout the example folder for details.\r\n\r\nNote: if using the `--traverse` option, partial registration is automatic.\r\n\r\n### .compile\r\n\r\nThis synchronous method can be used to enable all hsbfy functionality in another environment, such as node or a test runner (such as mocha).\r\n\r\n```js\r\n// mocha-hbs.js\r\nvar fs = require(\"fs\");\r\nvar hbsfy = require(\"hbsfy\");\r\n\r\nrequire.extensions['.hbs'] = function (module, filename) {\r\n  var file = fs.readFileSync(filename, \"utf8\");\r\n  var opts = { traverse: true };\r\n  return module._compile(hbsfy.compile(file, opts), filename);\r\n}\r\n```\r\n\r\n```sh\r\n$ mocha -r hbs:./mocha-hbs.js tests/\r\n```\r\n\r\nRemember to register your custom helpers as well! Ideally your templates themselves `require` your helpers and runtime, and call `registerHelper`. But if they don't, all helpers can be loaded at once as part of the require hook above:\r\n\r\n```js\r\n// mocha-hbs.js\r\nvar fs = require(\"fs\");\r\nvar hbsfy = require(\"hbsfy\");\r\nvar runtime = require(\"hbsfy/runtime\");\r\nvar helpers = require(\"./path/to/my/exported/helpers\");\r\n\r\nObject.keys(helpers).forEach(function (key) {\r\n  runtime.registerHelper(key, helpers[key]);\r\n});\r\n\r\nrequire.extensions['.hbs'] = function (module, filename) {\r\n  var file = fs.readFileSync(filename, \"utf8\");\r\n  var opts = { traverse: true };\r\n  return module._compile(hbsfy.compile(file, opts), filename);\r\n}\r\n```\r\n\r\n### Process output HTML string\r\n\r\nThis option accepts a function which takes one argument (the template file content) and returns a string which will be used as the source for the precompiled template object. The example below removes leading and trailing spaces to shorten templates.\r\n\r\n```\r\nhbsfy.configure({\r\n  processContent: function(content) {\r\n    content = content.replace(/^[\\x20\\t]+/mg, '').replace(/[\\x20\\t]+$/mg, '');\r\n    content = content.replace(/^[\\r\\n]+/, '').replace(/[\\r\\n]*$/, '\\n');\r\n    return content;\r\n  }\r\n});\r\n```\r\n\r\n## Changelog\r\n\r\n### 2.8.0\r\n\r\n  - Support block partials, ignoring templates with `@` prefix. [#60](https://github.com/epeli/node-hbsfy/pull/60)\r\n\r\n### 2.7.0\r\n\r\n  - Allow inline partials when using `--traverse`. [#54](https://github.com/epeli/node-hbsfy/pull/54)\r\n\r\n### 2.6.0\r\n\r\n  - Add `processContent` option. [#50](https://github.com/epeli/node-hbsfy/pull/50)\r\n\r\n### 2.5.0\r\n\r\n  - Export `findPartials` and `compile` for use in utilities / test frameworks [#49](https://github.com/epeli/node-hbsfy/pull/49).\r\n\r\n### 2.4.1\r\n\r\n  - Always strip BOM [#18](https://github.com/epeli/node-hbsfy/pull/18), [#46](https://github.com/epeli/node-hbsfy/pull/46)\r\n\r\n### 2.4.0\r\n\r\n  - support handlebars 2, 3, 4\r\n\r\n### 2.3.1\r\n\r\n  - Handle `null` nodes when traversing Handlebars AST.\r\n\r\n### 2.3.0\r\n\r\n  - Allow resolving / requiring partials using node's module resolution algorithm (`--traverse`). [#47](https://github.com/epeli/node-hbsfy/pull/47)\r\n\r\n### 2.2.1\r\n\r\n  - Emit compile errors instead of crashing. [#38](https://github.com/epeli/node-hbsfy/pull/38)\r\n\r\n### 2.2.0\r\n\r\n  - Support for compiler options [#29](https://github.com/epeli/node-hbsfy/pull/29)\r\n\r\n### 2.1.0\r\n\r\n  - Subargs options for alternate precompilers and compilers [#31](https://github.com/epeli/node-hbsfy/pull/31)\r\n\r\n### 2.0.0\r\n\r\n  - Support Browserify [subargs](https://github.com/substack/node-browserify/blob/5cbf55a4397f300df69be574b59f3f30ac01b9c2/bin/advanced.txt#L81-L90)\r\n  - The `configure` method does not mutate the inner state of the module\r\n    anymore\r\n    - Instead it returns a new transform function.\r\n  - Handlebars is not a peerDependency anymore\r\n    - It must be manually installed\r\n    - This relaxes completely the version binding of Handlebars - it is now possible to try Handlebars 2.0 alpha\r\n\r\n### 1.3.0\r\n\r\n  - Support Handlebars 1.3\r\n  - Now uses the official runtime api\r\n\r\n### 1.0.0\r\n\r\n  - Remove `handlebars-runtime` dependency and depend directly on\r\n    the `handlebars` module as a [peer dependency][].\r\n    - Runtime must be now required with `require(\"hbsfy/runtime\")` instead of\r\n      `require(\"handlebars-runtime\")`.\r\n    - Thanks to @kamicane for teaching me how to do this.\r\n  - Option to configure template extensions\r\n\r\n\r\n[Handlebars]: http://handlebarsjs.com/\r\n[Browserify]: https://github.com/substack/node-browserify\r\n[peer dependency]: http://blog.nodejs.org/2013/02/07/peer-dependencies/\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/epeli/node-hbsfy.git"
  },
  "scripts": {
    "test": "sh test.sh"
  },
  "version": "2.8.1"
}
